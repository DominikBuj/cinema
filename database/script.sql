SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

ALTER SCHEMA public OWNER TO postgres;

COMMENT ON SCHEMA public IS 'standard public schema';

SET default_tablespace = '';

SET default_table_access_method = heap;

CREATE TABLE public."Movies" (
    "Id" integer NOT NULL,
    "Name" text NOT NULL,
    "Description" text NOT NULL,
    "PosterUrl" text NOT NULL,
    "DurationHours" integer NOT NULL,
    "DurationMinutes" integer NOT NULL
);

ALTER TABLE public."Movies" OWNER TO postgres;

ALTER TABLE public."Movies" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Movies_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public."Reservations" (
    "Id" integer NOT NULL,
    "ViewingId" integer NOT NULL,
    "UserId" integer NOT NULL,
    "SelectedSeats" text NOT NULL
);

ALTER TABLE public."Reservations" OWNER TO postgres;

ALTER TABLE public."Reservations" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Reservations_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public."Users" (
    "Id" integer NOT NULL,
    "Name" text NOT NULL,
    "Surname" text NOT NULL,
    "Email" text NOT NULL,
    "PasswordHash" text NOT NULL,
    "Role" character varying(32) NOT NULL
);

ALTER TABLE public."Users" OWNER TO postgres;

ALTER TABLE public."Users" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Users_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public."Viewings" (
    "Id" integer NOT NULL,
    "Date" date NOT NULL,
    "StartTime" time without time zone NOT NULL,
    "EndTime" time without time zone NOT NULL,
    "MovieId" integer NOT NULL
);

ALTER TABLE public."Viewings" OWNER TO postgres;

ALTER TABLE public."Viewings" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Viewings_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public."__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL
);

ALTER TABLE public."__EFMigrationsHistory" OWNER TO postgres;

COPY public."Movies" ("Id", "Name", "Description", "PosterUrl", "DurationHours", "DurationMinutes") FROM stdin;
1	Suspiria	Suspiria is a 2018 supernatural horror film directed by Luca Guadagnino with a screenplay by David Kajganich, inspired by Dario Argento's 1977 Italian film of the same name. It stars Dakota Johnson as an American woman who enrolls at a prestigious dance academy in Berlin run by a coven of witches.	https://m.media-amazon.com/images/M/MV5BMjQ2MTIyNjM2MF5BMl5BanBnXkFtZTgwMDE3NDMyNjM@._V1_.jpg	2	32
2	Dune	A mythic and emotionally charged hero's journey, "Dune" tells the story of Paul Atreides, a brilliant and gifted young man born into a great destiny beyond his understanding, who must travel to the most dangerous planet in the universe to ensure the future of his family and his people.	https://static.posters.cz/image/1300/plakaty/dune-part-1-i122815.jpg	2	35
3	Parasite	The film, starring Song Kang-ho, Lee Sun-kyun, Cho Yeo-jeong, Choi Woo-shik, Park So-dam, Jang Hye-jin, Park Myung-hoon and Lee Jung-eun, follows a poor family who scheme to become employed by a wealthy family, infiltrating their household by posing as unrelated, highly qualified individuals.	https://i.etsystatic.com/18242346/r/il/87bc12/2184703308/il_fullxfull.2184703308_jpnu.jpg	2	12
4	Annihilation	Annihilation is a 2018 science fiction psychological horror film written and directed by Alex Garland, based on the 2014 novel of the same name by Jeff VanderMeer. It stars Natalie Portman, Jennifer Jason Leigh, Gina Rodriguez, Tessa Thompson, Tuva Novotny, and Oscar Isaac. The story follows a group of explorers who enter "The Shimmer", a mysterious quarantined zone of mutating plants and animals caused by an alien presence.	https://m.media-amazon.com/images/I/81pHBAx7A6L._AC_UF1000,1000_QL80_.jpg	1	55
\.

COPY public."Reservations" ("Id", "ViewingId", "UserId", "SelectedSeats") FROM stdin;
1	1	1	13,14,15,16
2	3	1	9
\.

COPY public."Users" ("Id", "Name", "Surname", "Email", "PasswordHash", "Role") FROM stdin;
1	Dominik	Bujnowicz	Dominik.Bujnowicz@comarch.pl	$2a$11$ONqseC3xGPTKG/6Rse2rHuhQqI9SApTnyGq9YfzVmj9V9G7XI7ES2	User
2	Admin		Admin@gmail.com	$2a$11$onSkMilNyqnTd7GgF6HgoOCWA4oamMs2cCVBwjv0TGcR50gY.HJrC	Admin
\.

COPY public."Viewings" ("Id", "Date", "StartTime", "EndTime", "MovieId") FROM stdin;
1	2023-03-05	17:00:00	19:32:00	1
2	2023-03-06	20:15:00	22:47:00	1
3	2023-03-07	10:00:00	12:35:00	2
4	2023-03-08	18:00:00	20:35:00	2
5	2023-03-07	18:30:00	20:42:00	3
6	2023-03-22	19:00:00	20:55:00	4
\.

COPY public."__EFMigrationsHistory" ("MigrationId", "ProductVersion") FROM stdin;
20230302131005_InitialCreate	7.0.3
\.

SELECT pg_catalog.setval('public."Movies_Id_seq"', 4, true);

SELECT pg_catalog.setval('public."Reservations_Id_seq"', 2, true);

SELECT pg_catalog.setval('public."Users_Id_seq"', 2, true);

SELECT pg_catalog.setval('public."Viewings_Id_seq"', 6, true);

ALTER TABLE ONLY public."Movies"
    ADD CONSTRAINT "PK_Movies" PRIMARY KEY ("Id");

ALTER TABLE ONLY public."Reservations"
    ADD CONSTRAINT "PK_Reservations" PRIMARY KEY ("Id");

ALTER TABLE ONLY public."Users"
    ADD CONSTRAINT "PK_Users" PRIMARY KEY ("Id");

ALTER TABLE ONLY public."Viewings"
    ADD CONSTRAINT "PK_Viewings" PRIMARY KEY ("Id");

ALTER TABLE ONLY public."__EFMigrationsHistory"
    ADD CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId");

CREATE INDEX "IX_Reservations_UserId" ON public."Reservations" USING btree ("UserId");

CREATE INDEX "IX_Reservations_ViewingId" ON public."Reservations" USING btree ("ViewingId");

CREATE INDEX "IX_Viewings_MovieId" ON public."Viewings" USING btree ("MovieId");

ALTER TABLE ONLY public."Reservations"
    ADD CONSTRAINT "FK_Reservations_Users_UserId" FOREIGN KEY ("UserId") REFERENCES public."Users"("Id") ON DELETE CASCADE;

ALTER TABLE ONLY public."Reservations"
    ADD CONSTRAINT "FK_Reservations_Viewings_ViewingId" FOREIGN KEY ("ViewingId") REFERENCES public."Viewings"("Id") ON DELETE CASCADE;

ALTER TABLE ONLY public."Viewings"
    ADD CONSTRAINT "FK_Viewings_Movies_MovieId" FOREIGN KEY ("MovieId") REFERENCES public."Movies"("Id") ON DELETE CASCADE;

REVOKE USAGE ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO PUBLIC;
